# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none 

variables:
  vmImageUnbutu: 'ubuntu-18.04'
  vmImageWindows: 'vs2017-win2016'
  SourceFolder: 'Terraform/Terraform'
  workingDirectory: 'D:\a\1\drop\'
  backendServiceArm: 'Demo-Air'
  backendAzureRmResourceGroupName: 'storage'
  backendAzureRmStorageAccountName: demoair40399
  backendAzureRmContainerName: 'terraform-state'
  backendAzureRmKey: terraform.tfstate

stages:
- stage: 'Build'
  displayName: 'Build infrastructure'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: '$(vmImageUnbutu)'

    steps:
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
      inputs:
        SourceFolder: '$(SourceFolder)'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
  

- stage: 'Plan'
  displayName: 'Plan the infrastructure'
  dependsOn: Build
  jobs:
  - deployment: Plan
    pool:
      vmImage: '$(vmImageWindows)'
    environment: prod
    strategy:
      runOnce:
        deploy:
          steps:
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: 'Install Terraform 0.14.3'
            inputs:
              terraformVersion: 0.14.3

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
            displayName: 'Terraform : init'
            inputs:
              workingDirectory: '$(workingDirectory)'
              commandOptions: '--reconfigure'
              backendServiceArm: '$(backendServiceArm)'
              backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
              backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
              backendAzureRmContainerName: '$(backendAzureRmContainerName)'
              backendAzureRmKey: '$(backendAzureRmKey)'


          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
            displayName: 'Terraform : plan'
            inputs:
              command: plan
              workingDirectory: '$(workingDirectory)'
              commandOptions: '-out main-prod.plan'
              environmentServiceNameAzureRM: '$(backendServiceArm)'
              backendServiceArm: '$(backendServiceArm)'
              backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
              backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
              backendAzureRmContainerName: '$(backendAzureRmContainerName)'
              backendAzureRmKey: '$(backendAzureRmKey)'

- stage: 'ManualApproval'
  displayName: 'Manual Intervention / approval'
  dependsOn: Plan
  jobs:
  - deployment: 'Validate'
    displayName: Validate
    environment: 'ApprovalRequired'
    strategy:
      runOnce:
        deploy:
         steps:
           - script: echo Wating for approval
          

- stage: 'Deploy'
  displayName: 'Deploy the infrastructure'
  dependsOn: 'ManualApproval'
  jobs:
  - deployment: Deploy
    pool:
      vmImage: '$(vmImageWindows)'
    environment: prod
    strategy:
      runOnce:
        deploy:
          steps:
          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            displayName: 'Install Terraform 0.14.3'
            inputs:
              terraformVersion: 0.14.3

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
            displayName: 'Terraform : init '
            inputs:
              workingDirectory: '$(workingDirectory)'
              commandOptions: '--reconfigure'
              backendServiceArm: '$(backendServiceArm)'
              backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
              backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
              backendAzureRmContainerName: '$(backendAzureRmContainerName)'
              backendAzureRmKey: '$(backendAzureRmKey)'

          - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
            displayName: 'Terraform : apply'
            inputs:
              command: apply
              workingDirectory: '$(workingDirectory)'
              environmentServiceNameAzureRM: '$(backendServiceArm)'
              backendServiceArm: '$(backendServiceArm)'
              backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
              backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
              backendAzureRmContainerName: '$(backendAzureRmContainerName)'
              backendAzureRmKey: '$(backendAzureRmKey)'
